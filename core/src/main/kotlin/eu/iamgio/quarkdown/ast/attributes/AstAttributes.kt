package eu.iamgio.quarkdown.ast.attributes

import eu.iamgio.quarkdown.ast.NestableNode
import eu.iamgio.quarkdown.ast.Node
import eu.iamgio.quarkdown.ast.base.block.LinkDefinition
import eu.iamgio.quarkdown.ast.quarkdown.FunctionCallNode
import eu.iamgio.quarkdown.context.toc.TableOfContents
import eu.iamgio.quarkdown.document.numbering.NumberingFormat

/**
 * Additional information about the node tree, produced by the parsing stage and stored in a [eu.iamgio.quarkdown.context.Context].
 * @see eu.iamgio.quarkdown.context.Context
 */
interface AstAttributes {
    /**
     * The root node of the tree.
     */
    val root: NestableNode?

    /**
     * Storage that, for each node that requests its location to be tracked ([LocationTrackableNode]),
     * contains its location in the document, in terms of section indices.
     * @see eu.iamgio.quarkdown.context.hooks.LocationAwarenessHook for the storing stage
     */
    val locations: Map<LocationTrackableNode, SectionLocation>

    /**
     * Labels/identifiers of nodes that are assigned it based on their position,
     * both own (see [locations]) and relative to others of the same kind.
     * The labels are often displayed in a caption.
     * Examples of these nodes are figures and tables.
     * For instance, depending on the document's [NumberingFormat],
     * an element may be labeled as `1.1`, `1.2`, `1.3`, `2.1`, etc.
     * @see eu.iamgio.quarkdown.context.hooks.LocationAwareLabelStorerHook for the storing stage
     */
    val positionalLabels: Map<Node, String>

    /**
     * The defined links, which can be referenced by other nodes.
     */
    val linkDefinitions: List<LinkDefinition>

    /**
     * The function calls to be later executed.
     */
    val functionCalls: List<FunctionCallNode>

    /**
     * Whether there is at least one code block.
     * This is used to load the HighlightJS library in HTML rendering only if necessary.
     */
    val hasCode: Boolean

    /**
     * Whether there is at least one math block or inline.
     * This is used to load the KaTeX library in HTML rendering only if necessary.
     */
    val hasMath: Boolean

    /**
     * Whether there is at least one Mermaid diagram.
     * This is used to load the Mermaid library in HTML rendering only if necessary.
     */
    val hasMermaidDiagram: Boolean

    /**
     * The table of contents of all the headings in the document.
     * This is generated by the tree traversal stage of the pipeline.
     */
    val tableOfContents: TableOfContents?

    /**
     * @return a new copied mutable instance of these attributes
     */
    fun toMutable(): MutableAstAttributes
}

/**
 * Writeable attributes that are modified during the parsing process,
 * and carry useful information for the next stages of the pipeline.
 * Storing these attributes while parsing prevents a further visit of the final tree.
 * @param root the root node of the tree. According to the architecture, this is set right after the parsing stage
 * @param locations the locations (in terms of section indices) of the nodes that request their location to be tracked.
 *                  This is populated in the tree traversal stage of the pipeline
 * @param linkDefinitions the defined links, which can be referenced by other nodes
 * @param functionCalls the function calls to be later executed
 * @param hasCode whether there is at least one code block.
 * @param hasMath whether there is at least one math block or inline.
 * @see eu.iamgio.quarkdown.context.MutableContext
 */
data class MutableAstAttributes(
    override var root: NestableNode? = null,
    override val positionalLabels: MutableMap<Node, String> = mutableMapOf(),
    override val locations: MutableMap<LocationTrackableNode, SectionLocation> = mutableMapOf(),
    override val linkDefinitions: MutableList<LinkDefinition> = mutableListOf(),
    override val functionCalls: MutableList<FunctionCallNode> = mutableListOf(),
    override var hasCode: Boolean = false,
    override var hasMath: Boolean = false,
    override var hasMermaidDiagram: Boolean = false,
    override var tableOfContents: TableOfContents? = null,
) : AstAttributes {
    override fun toMutable(): MutableAstAttributes = this.copy()
}
